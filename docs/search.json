[
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "About this blog"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Muhammad Abdullahi",
    "section": "",
    "text": "My name is Muhammad, ⌨️\nThis is my blog where I want to write what I learned, achieved and document my life generally, insha’Allah\n\n\n\n\n\n\n\n\n\n  \n\n\n\n\nMy first model\n\n\n\n\n\n\n\n\n\n\n \n\n\n\n\nNo matching items"
  },
  {
    "objectID": "posts/first_model/model1.html",
    "href": "posts/first_model/model1.html",
    "title": "Muhammad Abdullahi",
    "section": "",
    "text": "My first model\nThis model classifies cheetah from lion, tiger and everything else\n\n\n\n!pip install -Uqq fastai duckduckgo_search\n\n\nfrom duckduckgo_search import ddg_images\nfrom fastcore.all import *\n\ndef search_images(term, max_images=30):\n  print(f\"Searching for {term}\")\n  return L(ddg_images(term, max_results=max_images)).itemgot('image')\n\n\nurls = search_images('cheetah photos', max_images=1)\nurls[0]\n\nSearching for cheetah photos\n\n\n'http://blog.cincinnatizoo.org/wp-content/uploads/Cheetah-D0036.jpg'\n\n\n\nfrom fastdownload import download_url\ndest = 'cheetah.jpg'\ndownload_url(urls[0], dest, show_progress=False)\n\nfrom fastai.vision.all import *\nim = Image.open(dest)\nim.to_thumb(256,256)\n\n\n\n\n\ndownload_url(search_images('tiger images', 1)[0], 'tiger.jpg', show_progress=False)\nImage.open('tiger.jpg').to_thumb(256, 256)\n\nSearching for tiger images\n\n\n\n\n\n\ndownload_url(search_images('lion images', 1)[0], 'lion.jpg', show_progress=False)\nImage.open('lion.jpg').to_thumb(256, 256)\n\nSearching for lion images\n\n\n\n\n\n\nsearches = 'cheetah', 'tiger', 'lion'\npath = Path('cheetah_or_not')\nfrom time import sleep\n\nfor item in searches:\n  dest = (path/item)\n  dest.mkdir(exist_ok=True, parents=True)\n  download_images(dest, urls=search_images(f'{item} photo'))\n  sleep(10)\n  resize_images(path/item, max_size = 400, dest=path/item)\n\nSearching for cheetah photo\nSearching for tiger photo\nSearching for lion photo\n\n\n\nfailed = verify_images(get_image_files(path))\nfailed.map(Path.unlink)\nlen(failed)\n\n0\n\n\n\ndls = DataBlock(\n    blocks = (ImageBlock, CategoryBlock),\n    get_items = get_image_files,\n    splitter = RandomSplitter(valid_pct = 0.2, seed = 42),\n    get_y = parent_label,\n    item_tfms = [Resize(192,method ='squish')]\n).dataloaders(path, bs=32)\n\ndls.show_batch(max_n = 9)\n\n\n\n\n\nlearn = vision_learner(dls,resnet18, metrics=error_rate)\nlearn.fine_tune(3)\n\n/usr/local/lib/python3.7/dist-packages/torchvision/models/_utils.py:209: UserWarning: The parameter 'pretrained' is deprecated since 0.13 and will be removed in 0.15, please use 'weights' instead.\n  f\"The parameter '{pretrained_param}' is deprecated since 0.13 and will be removed in 0.15, \"\n/usr/local/lib/python3.7/dist-packages/torchvision/models/_utils.py:223: UserWarning: Arguments other than a weight enum or `None` for 'weights' are deprecated since 0.13 and will be removed in 0.15. The current behavior is equivalent to passing `weights=ResNet18_Weights.IMAGENET1K_V1`. You can also use `weights=ResNet18_Weights.DEFAULT` to get the most up-to-date weights.\n  warnings.warn(msg)\n\n\n\n\n\n\n\n\n  \n    \n      epoch\n      train_loss\n      valid_loss\n      error_rate\n      time\n    \n  \n  \n    \n      0\n      1.581225\n      0.469961\n      0.187500\n      00:00\n    \n  \n\n\n\n\n\n\n\n\n\n  \n    \n      epoch\n      train_loss\n      valid_loss\n      error_rate\n      time\n    \n  \n  \n    \n      0\n      0.772286\n      0.240513\n      0.125000\n      00:00\n    \n    \n      1\n      0.429333\n      0.085089\n      0.000000\n      00:00\n    \n    \n      2\n      0.289199\n      0.067679\n      0.000000\n      00:00\n    \n  \n\n\n\n\nis_cheetah,_,probs = learn.predict(PILImage.create('cheetah1.png'))\nprint(f\"This is a {is_cheetah} {probs[0]}\")\n\n\n\n\n\n\n\n\nThis is a cheetah 0.9688272476196289"
  },
  {
    "objectID": "projects.html",
    "href": "projects.html",
    "title": "Projects",
    "section": "",
    "text": "These are the projects section."
  },
  {
    "objectID": "tils/day-one.html",
    "href": "tils/day-one.html",
    "title": "Day one",
    "section": "",
    "text": "Today I am starting a new deep learning course."
  },
  {
    "objectID": "tils/index.html",
    "href": "tils/index.html",
    "title": "TILs",
    "section": "",
    "text": "This is today I learned section\n\n\n\n\n\n\n\n\n\n\nDate\n\n\nTitle\n\n\n\n\n\n\nNov 5, 2022\n\n\nDay one\n\n\n\n\n\n\nNo matching items"
  }
]